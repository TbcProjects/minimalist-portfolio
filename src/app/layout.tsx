import "../lib/theme/global.css";

import { fetchLayoutData } from "@utils/fetchDato";

import SiteHeader from "@components/layout/SiteHeader";
import SiteFooter from "@components/layout/SiteFooter";

import { Ibarra_Real_Nova, Public_Sans } from "next/font/google";
import { ISiteLayoutQuery } from "@typesDef/dato";

const IbarraRealNova = Ibarra_Real_Nova({
  subsets: ["latin"],
  variable: "--font-ibrarra-real-nova",
});

const PublicSans = Public_Sans({
  subsets: ["latin"],
  variable: "--font-public-sans",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type ISiteLayoutData = NonNullable<
  ISiteLayoutQuery["sitelayout"]
>["layoutModules"];

export type ISiteLayoutContent = {
  [K in NonNullable<
    ISiteLayoutData[number]["__typename"]
  >]: ISiteLayoutData[number] & {
    __typename: K;
  };
};

export type INavigationContent = ISiteLayoutContent["ModuleNavigationRecord"];
export type ISocialContent = ISiteLayoutContent["ModuleSocialRecord"];

const findContentByKey = (content: ISiteLayoutData, key: string) => {
  return content?.find(
    (item) => item._modelApiKey && item._modelApiKey === key
  );
};

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const data = await fetchLayoutData();
  const layoutData = data?.sitelayout?.layoutModules as ISiteLayoutData;

  const navigationLinks = findContentByKey(
    layoutData,
    "module_navigation"
  ) as INavigationContent;

  const socialLink = findContentByKey(
    layoutData,
    "module_social"
  ) as ISocialContent;

  return (
    <html
      lang="en"
      className={`${IbarraRealNova.variable} ${PublicSans.variable}`}
    >
      <body>
        <SiteHeader navigationLinks={navigationLinks} />
        {children}
        <SiteFooter
          navigationLinks={navigationLinks}
          socialLinks={socialLink}
        />
      </body>
    </html>
  );
}
